metrics:
  image: 

  service:
    port: 3000
    
  environment:
    req:
      interval: 60  # Interval in seconds to get the metrics
    prometheus:
      url: http://prom-prometheus-prometheus.default.svc.cluster.local/api/v1/query # The link to the Prometheus API
    promql:         # PromQL queries to get the metrics - instances and nodes should be up-to-date with the cluster.
      node_count: count(kube_node_info{instance!~"10.7.96.5.*|10.7.96.7.*"}) # PromQL query to get the amount of nodes
      total_cpu: count(count(node_cpu_seconds_total{instance!~"10.7.96.5:9100|10.7.96.7:9100"}) by (cpu, instance)) # PromQL query to get the total amount of CPU cores
      avg_cpu: 100 - (avg by (job) (rate(node_cpu_seconds_total{mode="idle", node!="10.7.96.5:9100|10.7.96.7:9100"}[2m])) * 100) # PromQL query to get the CPU usage percentage
      total_ram: node_memory_MemTotal_bytes{instance!~"10.7.96.5:9100|10.7.96.7:9100"} # PromQL query to get the total amount of RAM in bytes
      avg_ram: sum(node_memory_MemTotal_bytes{instance!~"10.7.96.5:9100|10.7.96.7:9100"} - (node_memory_MemFree_bytes{instance!~"10.7.96.5:9100|10.7.96.7:9100"} + node_memory_Cached_bytes{instance!~"10.7.96.5:9100|10.7.96.7:9100"} + node_memory_Buffers_bytes{instance!~"10.7.96.5:9100|10.7.96.7:9100"})) # PromQL query to get the RAM usage in bytes
      avg_request: rate(nginx_ingress_nginx_http_requests_total{instance="10.244.255.165:9113"}[1m]) # PromQL query to get the amount of requests per minute
      avg_request_latency: sum(rate(http_request_duration_seconds_sum{instance!~"10.7.96.5:9100|10.7.96.7:9100"}[1m])) / sum(rate(http_request_duration_seconds_count{instance!~"10.7.96.5:9100|10.7.96.7:9100"}[1m])) # PromQL query to get the average request latency in seconds

postgresql:                         # PostgreSQL settings
  image:                            
    registry: docker.io
    repository: bitnami/postgresql
    tag: latest
  auth:
    username:                 # Username for the PostgreSQL database - should be the same in Adapter and Prediction Component
    password:                 # Password for the PostgreSQL database - should be the same in Adapter and Prediction Component
    database:                 # Database name for the PostgreSQL database - should be the same in Adapter and Prediction Component
  service:
    port: 5432
  primary:
    persistence:
      enabled: true
      existingClaim: ""       # Existing claim for the persistent volume (optional can be left empty)
      storageClass: hostpath
      accessModes:
        - ReadWriteOnce       # Access mode for the persistent volume (default is ReadWriteOnce)
      size: 5Gi               # Recommended size for the persistent volume
    tolerations:              # Tolerations for the PostgreSQL pod - should not be changed unless PostgreSQL has to be scheduled on a other node than the managing node  
      - key: "Managing"
        operator: "Exists"
        effect: "NoSchedule"
    affinity:                 # Affinity for the PostgreSQL pod - should not be changed unless PostgreSQL has to be scheduled on a other node than the managing node
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: "Managing-node"
                  operator: In
                  values:
                    - "true"
